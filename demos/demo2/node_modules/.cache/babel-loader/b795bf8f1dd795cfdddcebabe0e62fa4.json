{"ast":null,"code":"import \"antd/lib/table/style\";\nimport _Table from \"antd/lib/table\";\nvar _jsxFileName = \"/Users/xumeihong/Documents/code/git/react/demos/demo2/src/components/BaseTable/index.js\";\nimport React from 'react';\nimport Utils from '../../utils/utils';\nexport default class BaseTable extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onRowClick = (record, index) => {\n      let rowSelectionType = this.props.rowSelectionType;\n      let selectedRowKeys = this.props.selectedRowKeys;\n      let selectedItem = this.props.selectedItem;\n      let selectedRows = this.props.selectedRows;\n\n      if (rowSelectionType == 'checkbox') {\n        if (selectedRows.length > 0) {\n          let ids = selectedRows.map(item => {\n            return item.id;\n          });\n          let id = ids.indexOf(record.id);\n\n          if (id == -1) {\n            selectedRowKeys.push(index);\n            selectedItem = record;\n            selectedRows.push(record);\n          } else {\n            selectedRowKeys.splice(id, 1);\n            selectedRows.splice(id, 1);\n          }\n        } else {\n          selectedRowKeys.push(index);\n          selectedItem = record;\n          selectedRows.push(record);\n        }\n      } else {\n        // radio\n        selectedRowKeys = [index];\n        selectedItem = record;\n        selectedRows = [record];\n      }\n\n      this.props.updateSelectItem(selectedRowKeys, selectedItem, selectedRows);\n    };\n\n    this.initTable = () => {\n      let rowSelectionType = this.props.rowSelectionType;\n      let selectedRowKeys = this.props.selectedRowKeys;\n      const rowSelection = {\n        type: \"radio\",\n        selectedRowKeys\n      };\n\n      if (rowSelectionType === false || rowSelectionType === null) {\n        rowSelectionType = false;\n      } else if (rowSelectionType == 'checkbox') {\n        rowSelection.type = 'checkbox';\n      }\n\n      return /*#__PURE__*/React.createElement(_Table, Object.assign({\n        bordered: true\n      }, this.props, {\n        // columns={columns}\n        // dataSource={this.state.list}\n        // pagination={this.state.pagination}\n        rowSelection: rowSelectionType ? rowSelection : null,\n        onRow: (record, index) => {\n          return {\n            onClick: () => {\n              if (!rowSelectionType) {\n                return;\n              }\n\n              this.onRowClick(record, index);\n            }\n          };\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 16\n        }\n      }));\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }\n    }, this.initTable());\n  }\n\n}","map":{"version":3,"sources":["/Users/xumeihong/Documents/code/git/react/demos/demo2/src/components/BaseTable/index.js"],"names":["React","Utils","BaseTable","Component","onRowClick","record","index","rowSelectionType","props","selectedRowKeys","selectedItem","selectedRows","length","ids","map","item","id","indexOf","push","splice","updateSelectItem","initTable","rowSelection","type","onClick","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Table } from 'antd'\nimport Utils from '../../utils/utils';\n\n\nexport default class BaseTable extends React.Component {\n\n    onRowClick = (record, index) => {\n        let rowSelectionType = this.props.rowSelectionType;\n        let selectedRowKeys = this.props.selectedRowKeys;\n        let selectedItem = this.props.selectedItem;\n        let selectedRows = this.props.selectedRows;\n        if (rowSelectionType == 'checkbox') {\n\n            if (selectedRows.length > 0) {\n                let ids = selectedRows.map(item => {\n                    return item.id;\n                })\n                let id = ids.indexOf(record.id)\n                if (id == -1) {\n                    selectedRowKeys.push(index);\n                    selectedItem = record;\n                    selectedRows.push(record);\n                } else {\n                    selectedRowKeys.splice(id, 1);\n                    selectedRows.splice(id, 1);\n                }\n            } else {\n                selectedRowKeys.push(index);\n                selectedItem = record;\n                selectedRows.push(record);\n            }\n\n        } else {\n            // radio\n            selectedRowKeys = [index];\n            selectedItem = record;\n            selectedRows = [record];\n        }\n        this.props.updateSelectItem(selectedRowKeys, selectedItem, selectedRows);\n\n    }\n    initTable = () => {\n        let rowSelectionType = this.props.rowSelectionType;\n        let selectedRowKeys = this.props.selectedRowKeys;\n        const rowSelection = {\n            type: \"radio\",\n            selectedRowKeys,\n        }\n        if (rowSelectionType === false || rowSelectionType === null) {\n            rowSelectionType = false;\n        } else if (rowSelectionType == 'checkbox') {\n            rowSelection.type = 'checkbox';\n        }\n        return <Table\n            bordered\n            {...this.props}\n            // columns={columns}\n            // dataSource={this.state.list}\n            // pagination={this.state.pagination}\n            rowSelection={rowSelectionType ? rowSelection : null}\n            onRow={(record, index) => {\n                return {\n                    onClick: () => {\n                        if (!rowSelectionType) {\n                            return;\n                        }\n                        this.onRowClick(record, index)\n                    }\n                };\n            }}\n        />\n    }\n\n    render() {\n        return (\n            <div>\n                {this.initTable()}\n            </div>\n        );\n    }\n}\n"]},"metadata":{},"sourceType":"module"}