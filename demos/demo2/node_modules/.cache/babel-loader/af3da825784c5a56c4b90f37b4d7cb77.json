{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar SeriesModel = require(\"../../model/Series\");\n\nvar Tree = require(\"../../data/Tree\");\n\nvar _treeHelper = require(\"../helper/treeHelper\");\n\nvar wrapTreePathInfo = _treeHelper.wrapTreePathInfo;\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar _default = SeriesModel.extend({\n  type: 'series.sunburst',\n\n  /**\n   * @type {module:echarts/data/Tree~Node}\n   */\n  _viewRoot: null,\n  getInitialData: function (option, ecModel) {\n    // Create a virtual root.\n    var root = {\n      name: option.name,\n      children: option.data\n    };\n    completeTreeValue(root);\n    var levels = option.levels || []; // levels = option.levels = setDefault(levels, ecModel);\n\n    var treeOption = {};\n    treeOption.levels = levels; // Make sure always a new tree is created when setOption,\n    // in TreemapView, we check whether oldTree === newTree\n    // to choose mappings approach among old shapes and new shapes.\n\n    return Tree.createTree(root, this, treeOption).data;\n  },\n  optionUpdated: function () {\n    this.resetViewRoot();\n  },\n\n  /*\n   * @override\n   */\n  getDataParams: function (dataIndex) {\n    var params = SeriesModel.prototype.getDataParams.apply(this, arguments);\n    var node = this.getData().tree.getNodeByDataIndex(dataIndex);\n    params.treePathInfo = wrapTreePathInfo(node, this);\n    return params;\n  },\n  defaultOption: {\n    zlevel: 0,\n    z: 2,\n    // 默认全局居中\n    center: ['50%', '50%'],\n    radius: [0, '75%'],\n    // 默认顺时针\n    clockwise: true,\n    startAngle: 90,\n    // 最小角度改为0\n    minAngle: 0,\n    percentPrecision: 2,\n    // If still show when all data zero.\n    stillShowZeroSum: true,\n    // Policy of highlighting pieces when hover on one\n    // Valid values: 'none' (for not downplay others), 'descendant',\n    // 'ancestor', 'self'\n    highlightPolicy: 'descendant',\n    // 'rootToNode', 'link', or false\n    nodeClick: 'rootToNode',\n    renderLabelForZeroData: false,\n    label: {\n      // could be: 'radial', 'tangential', or 'none'\n      rotate: 'radial',\n      show: true,\n      opacity: 1,\n      // 'left' is for inner side of inside, and 'right' is for outter\n      // side for inside\n      align: 'center',\n      position: 'inside',\n      distance: 5,\n      silent: true\n    },\n    itemStyle: {\n      borderWidth: 1,\n      borderColor: 'white',\n      borderType: 'solid',\n      shadowBlur: 0,\n      shadowColor: 'rgba(0, 0, 0, 0.2)',\n      shadowOffsetX: 0,\n      shadowOffsetY: 0,\n      opacity: 1\n    },\n    highlight: {\n      itemStyle: {\n        opacity: 1\n      }\n    },\n    downplay: {\n      itemStyle: {\n        opacity: 0.5\n      },\n      label: {\n        opacity: 0.6\n      }\n    },\n    // Animation type canbe expansion, scale\n    animationType: 'expansion',\n    animationDuration: 1000,\n    animationDurationUpdate: 500,\n    animationEasing: 'cubicOut',\n    data: [],\n    levels: [],\n\n    /**\n     * Sort order.\n     *\n     * Valid values: 'desc', 'asc', null, or callback function.\n     * 'desc' and 'asc' for descend and ascendant order;\n     * null for not sorting;\n     * example of callback function:\n     * function(nodeA, nodeB) {\n     *     return nodeA.getValue() - nodeB.getValue();\n     * }\n     */\n    sort: 'desc'\n  },\n  getViewRoot: function () {\n    return this._viewRoot;\n  },\n\n  /**\n   * @param {module:echarts/data/Tree~Node} [viewRoot]\n   */\n  resetViewRoot: function (viewRoot) {\n    viewRoot ? this._viewRoot = viewRoot : viewRoot = this._viewRoot;\n    var root = this.getRawData().tree.root;\n\n    if (!viewRoot || viewRoot !== root && !root.contains(viewRoot)) {\n      this._viewRoot = root;\n    }\n  }\n});\n/**\n * @param {Object} dataNode\n */\n\n\nfunction completeTreeValue(dataNode) {\n  // Postorder travel tree.\n  // If value of none-leaf node is not set,\n  // calculate it by suming up the value of all children.\n  var sum = 0;\n  zrUtil.each(dataNode.children, function (child) {\n    completeTreeValue(child);\n    var childValue = child.value;\n    zrUtil.isArray(childValue) && (childValue = childValue[0]);\n    sum += childValue;\n  });\n  var thisValue = dataNode.value;\n\n  if (zrUtil.isArray(thisValue)) {\n    thisValue = thisValue[0];\n  }\n\n  if (thisValue == null || isNaN(thisValue)) {\n    thisValue = sum;\n  } // Value should not less than 0.\n\n\n  if (thisValue < 0) {\n    thisValue = 0;\n  }\n\n  zrUtil.isArray(dataNode.value) ? dataNode.value[0] = thisValue : dataNode.value = thisValue;\n}\n\nmodule.exports = _default;","map":{"version":3,"sources":["/Users/xumeihong/Documents/code/git/react/demos/demo2/node_modules/echarts/lib/chart/sunburst/SunburstSeries.js"],"names":["zrUtil","require","SeriesModel","Tree","_treeHelper","wrapTreePathInfo","_default","extend","type","_viewRoot","getInitialData","option","ecModel","root","name","children","data","completeTreeValue","levels","treeOption","createTree","optionUpdated","resetViewRoot","getDataParams","dataIndex","params","prototype","apply","arguments","node","getData","tree","getNodeByDataIndex","treePathInfo","defaultOption","zlevel","z","center","radius","clockwise","startAngle","minAngle","percentPrecision","stillShowZeroSum","highlightPolicy","nodeClick","renderLabelForZeroData","label","rotate","show","opacity","align","position","distance","silent","itemStyle","borderWidth","borderColor","borderType","shadowBlur","shadowColor","shadowOffsetX","shadowOffsetY","highlight","downplay","animationType","animationDuration","animationDurationUpdate","animationEasing","sort","getViewRoot","viewRoot","getRawData","contains","dataNode","sum","each","child","childValue","value","isArray","thisValue","isNaN","module","exports"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar SeriesModel = require(\"../../model/Series\");\n\nvar Tree = require(\"../../data/Tree\");\n\nvar _treeHelper = require(\"../helper/treeHelper\");\n\nvar wrapTreePathInfo = _treeHelper.wrapTreePathInfo;\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar _default = SeriesModel.extend({\n  type: 'series.sunburst',\n\n  /**\n   * @type {module:echarts/data/Tree~Node}\n   */\n  _viewRoot: null,\n  getInitialData: function (option, ecModel) {\n    // Create a virtual root.\n    var root = {\n      name: option.name,\n      children: option.data\n    };\n    completeTreeValue(root);\n    var levels = option.levels || []; // levels = option.levels = setDefault(levels, ecModel);\n\n    var treeOption = {};\n    treeOption.levels = levels; // Make sure always a new tree is created when setOption,\n    // in TreemapView, we check whether oldTree === newTree\n    // to choose mappings approach among old shapes and new shapes.\n\n    return Tree.createTree(root, this, treeOption).data;\n  },\n  optionUpdated: function () {\n    this.resetViewRoot();\n  },\n\n  /*\n   * @override\n   */\n  getDataParams: function (dataIndex) {\n    var params = SeriesModel.prototype.getDataParams.apply(this, arguments);\n    var node = this.getData().tree.getNodeByDataIndex(dataIndex);\n    params.treePathInfo = wrapTreePathInfo(node, this);\n    return params;\n  },\n  defaultOption: {\n    zlevel: 0,\n    z: 2,\n    // 默认全局居中\n    center: ['50%', '50%'],\n    radius: [0, '75%'],\n    // 默认顺时针\n    clockwise: true,\n    startAngle: 90,\n    // 最小角度改为0\n    minAngle: 0,\n    percentPrecision: 2,\n    // If still show when all data zero.\n    stillShowZeroSum: true,\n    // Policy of highlighting pieces when hover on one\n    // Valid values: 'none' (for not downplay others), 'descendant',\n    // 'ancestor', 'self'\n    highlightPolicy: 'descendant',\n    // 'rootToNode', 'link', or false\n    nodeClick: 'rootToNode',\n    renderLabelForZeroData: false,\n    label: {\n      // could be: 'radial', 'tangential', or 'none'\n      rotate: 'radial',\n      show: true,\n      opacity: 1,\n      // 'left' is for inner side of inside, and 'right' is for outter\n      // side for inside\n      align: 'center',\n      position: 'inside',\n      distance: 5,\n      silent: true\n    },\n    itemStyle: {\n      borderWidth: 1,\n      borderColor: 'white',\n      borderType: 'solid',\n      shadowBlur: 0,\n      shadowColor: 'rgba(0, 0, 0, 0.2)',\n      shadowOffsetX: 0,\n      shadowOffsetY: 0,\n      opacity: 1\n    },\n    highlight: {\n      itemStyle: {\n        opacity: 1\n      }\n    },\n    downplay: {\n      itemStyle: {\n        opacity: 0.5\n      },\n      label: {\n        opacity: 0.6\n      }\n    },\n    // Animation type canbe expansion, scale\n    animationType: 'expansion',\n    animationDuration: 1000,\n    animationDurationUpdate: 500,\n    animationEasing: 'cubicOut',\n    data: [],\n    levels: [],\n\n    /**\n     * Sort order.\n     *\n     * Valid values: 'desc', 'asc', null, or callback function.\n     * 'desc' and 'asc' for descend and ascendant order;\n     * null for not sorting;\n     * example of callback function:\n     * function(nodeA, nodeB) {\n     *     return nodeA.getValue() - nodeB.getValue();\n     * }\n     */\n    sort: 'desc'\n  },\n  getViewRoot: function () {\n    return this._viewRoot;\n  },\n\n  /**\n   * @param {module:echarts/data/Tree~Node} [viewRoot]\n   */\n  resetViewRoot: function (viewRoot) {\n    viewRoot ? this._viewRoot = viewRoot : viewRoot = this._viewRoot;\n    var root = this.getRawData().tree.root;\n\n    if (!viewRoot || viewRoot !== root && !root.contains(viewRoot)) {\n      this._viewRoot = root;\n    }\n  }\n});\n/**\n * @param {Object} dataNode\n */\n\n\nfunction completeTreeValue(dataNode) {\n  // Postorder travel tree.\n  // If value of none-leaf node is not set,\n  // calculate it by suming up the value of all children.\n  var sum = 0;\n  zrUtil.each(dataNode.children, function (child) {\n    completeTreeValue(child);\n    var childValue = child.value;\n    zrUtil.isArray(childValue) && (childValue = childValue[0]);\n    sum += childValue;\n  });\n  var thisValue = dataNode.value;\n\n  if (zrUtil.isArray(thisValue)) {\n    thisValue = thisValue[0];\n  }\n\n  if (thisValue == null || isNaN(thisValue)) {\n    thisValue = sum;\n  } // Value should not less than 0.\n\n\n  if (thisValue < 0) {\n    thisValue = 0;\n  }\n\n  zrUtil.isArray(dataNode.value) ? dataNode.value[0] = thisValue : dataNode.value = thisValue;\n}\n\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}