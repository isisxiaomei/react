{"ast":null,"code":"import \"antd/lib/card/style\";\nimport _Card from \"antd/lib/card\";\nimport \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/checkbox/style\";\nimport _Checkbox from \"antd/lib/checkbox\";\nimport \"antd/lib/input/style\";\nimport _Input from \"antd/lib/input\";\nimport \"antd/lib/icon/style\";\nimport _Icon from \"antd/lib/icon\";\nimport \"antd/lib/message/style\";\nimport _message from \"antd/lib/message\";\nimport \"antd/lib/form/style\";\nimport _Form from \"antd/lib/form\";\nvar _jsxFileName = \"/Users/xumeihong/Documents/code/git/react/demos/demo2/src/pages/form/login.js\";\nimport React, { Component } from 'react';\nconst FormItem = _Form.Item;\n\nclass FormLogin extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleSubmit = e => {\n      e.preventDefault(); // getFieldsValue可以获取表单所有的值返回一个对象\n\n      let userInfo = this.props.form.getFieldsValue(); // validateFields方法校验表单的设定的rules规则; 如果err!=null 说明rule校验不通过\n\n      this.props.form.validateFields((err, values) => {\n        if (!err) {\n          _message.success(`恭喜你 ${values.username} & ${values.password} 正确`);\n\n          _message.success(`恭喜你 ${userInfo.username} & ${userInfo.password} 正确`);\n        }\n      });\n    };\n  }\n\n  render() {\n    const {\n      getFieldDecorator\n    } = this.props.form;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(_Card, {\n      title: \"\\u767B\\u5F55\\u884C\\u5185\\u8868\\u5355\",\n      className: \"card-wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(_Form, {\n      layout: \"\",\n      style: {\n        width: 400\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(FormItem, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 25\n      }\n    }, getFieldDecorator('username', {\n      initialValue: 'xiaomei',\n      rules: [{\n        required: true,\n        message: 'Please input your username!'\n      }, {\n        min: 5,\n        max: 10,\n        message: \"长度不在范围内\"\n      }]\n    })( /*#__PURE__*/React.createElement(_Input, {\n      prefix: /*#__PURE__*/React.createElement(_Icon, {\n        type: \"user\",\n        style: {\n          color: 'rgba(0,0,0,.25)'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 45\n        }\n      }),\n      placeholder: \"Username\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 33\n      }\n    }))), /*#__PURE__*/React.createElement(FormItem, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 25\n      }\n    }, getFieldDecorator('password', {\n      rules: [{\n        required: true,\n        message: 'Please input your password!'\n      }]\n    })( /*#__PURE__*/React.createElement(_Input, {\n      prefix: /*#__PURE__*/React.createElement(_Icon, {\n        type: \"lock\",\n        style: {\n          color: 'rgba(0,0,0,.25)'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 45\n        }\n      }),\n      placeholder: \"Password\",\n      type: \"password\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 33\n      }\n    }))), /*#__PURE__*/React.createElement(FormItem, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 25\n      }\n    }, getFieldDecorator('remember', {\n      valuePropName: 'checked',\n      initialValue: true\n    })( /*#__PURE__*/React.createElement(_Checkbox, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 32\n      }\n    }, \"Remember me\")), /*#__PURE__*/React.createElement(\"a\", {\n      className: \"login-form-forgot\",\n      href: \"\",\n      style: {\n        float: \"right\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 29\n      }\n    }, \"Forgot password\")), /*#__PURE__*/React.createElement(FormItem, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(_Button, {\n      type: \"primary\",\n      onClick: this.handleSubmit,\n      style: {\n        width: 400\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 29\n      }\n    }, \"login\")))));\n  }\n\n} // 只有使用了Form.create({})(xxx)才可以在this.props.form中获取到表单的相关数据\n\n\nexport default _Form.create({})(FormLogin);\n; // 总结用法：\n// getFieldDecorator：包装组件返回一个方法；用于设定初始值个制定校验规则还可以实现双向绑定;经过 getFieldDecorator 包装的控件，表单控件会自动添加 value（或 valuePropName 指定的其他属性） onChange（或 trigger 指定的其他属性），数据同步将被 Form 接管","map":{"version":3,"sources":["/Users/xumeihong/Documents/code/git/react/demos/demo2/src/pages/form/login.js"],"names":["React","Component","FormItem","Item","FormLogin","handleSubmit","e","preventDefault","userInfo","props","form","getFieldsValue","validateFields","err","values","success","username","password","render","getFieldDecorator","width","initialValue","rules","required","message","min","max","color","valuePropName","float","create"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Card, Icon, Form, Input, Button, message, Checkbox } from 'antd';\nconst FormItem = Form.Item;\nclass FormLogin extends Component {\n\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n\n        // getFieldsValue可以获取表单所有的值返回一个对象\n        let userInfo = this.props.form.getFieldsValue();\n\n        // validateFields方法校验表单的设定的rules规则; 如果err!=null 说明rule校验不通过\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                message.success(`恭喜你 ${values.username} & ${values.password} 正确`);\n                message.success(`恭喜你 ${userInfo.username} & ${userInfo.password} 正确`)\n            }\n        });\n\n    }\n    render() {\n        const { getFieldDecorator } = this.props.form;\n        return (\n            <div>\n                <Card title=\"登录行内表单\" className=\"card-wrap\">\n                    <Form layout=\"\" style={{ width: 400 }}>\n                        <FormItem >\n                            {getFieldDecorator('username', {\n                                initialValue: 'xiaomei',\n                                rules: [\n                                    {\n                                        required: true,\n                                        message: 'Please input your username!',\n                                    }, {\n                                        min: 5,\n                                        max: 10,\n                                        message: \"长度不在范围内\"\n                                    }\n                                ],\n                            })(\n                                <Input\n                                    prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                                    placeholder=\"Username\"\n                                />,\n                            )}\n                        </FormItem>\n                        <FormItem >\n                            {getFieldDecorator('password', {\n                                rules: [{\n                                    required: true,\n                                    message: 'Please input your password!'\n                                }],\n                            })(\n                                <Input\n                                    prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                                    placeholder=\"Password\"\n                                    type=\"password\"\n                                />,\n                            )}\n                        </FormItem>\n                        <FormItem >\n                            {getFieldDecorator('remember', {\n                                valuePropName: 'checked',\n                                initialValue: true,\n                            })(<Checkbox>Remember me</Checkbox>)}\n                            <a className=\"login-form-forgot\" href=\"\" style={{ float: \"right\" }}>\n                                Forgot password\n                            </a>\n\n                        </FormItem>\n                        <FormItem >\n                            <Button type=\"primary\" onClick={this.handleSubmit} style={{ width: 400 }}>login</Button>\n                        </FormItem>\n\n                    </Form>\n                </Card>\n\n            </div>\n        );\n    }\n}\n// 只有使用了Form.create({})(xxx)才可以在this.props.form中获取到表单的相关数据\nexport default Form.create({})(FormLogin);;\n\n\n// 总结用法：\n// getFieldDecorator：包装组件返回一个方法；用于设定初始值个制定校验规则还可以实现双向绑定;经过 getFieldDecorator 包装的控件，表单控件会自动添加 value（或 valuePropName 指定的其他属性） onChange（或 trigger 指定的其他属性），数据同步将被 Form 接管\n"]},"metadata":{},"sourceType":"module"}