{"ast":null,"code":"import \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/checkbox/style\";\nimport _Checkbox from \"antd/lib/checkbox\";\nimport \"antd/lib/date-picker/style\";\nimport _DatePicker from \"antd/lib/date-picker\";\nimport \"antd/lib/input/style\";\nimport _Input from \"antd/lib/input\";\nimport \"antd/lib/select/style\";\nimport _Select from \"antd/lib/select\";\nimport \"antd/lib/form/style\";\nimport _Form from \"antd/lib/form\";\nvar _jsxFileName = \"/Users/xumeihong/Documents/code/git/react/demos/demo2/src/components/BaseForm/index.js\";\nimport React from 'react';\nimport Utils from '../../utils/utils';\nconst FormItem = _Form.Item;\nconst Option = _Select.Option;\n\nclass FilterForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.initFormList = () => {\n      const {\n        getFieldDecorator\n      } = this.props.form;\n      const formList = this.props.formList;\n      const formItemList = [];\n\n      if (formList && formList.length > 0) {\n        formList.forEach((item, index) => {\n          let type = item.type;\n          let label = item.label;\n          let field = item.field;\n          let placeholder = item.placeholder;\n          let initialValue = item.initialValue || '';\n          let width = item.width;\n          let list = item.list;\n\n          if (type == 'SELECT') {\n            const SELECT = /*#__PURE__*/React.createElement(FormItem, {\n              label: label,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 22,\n                columnNumber: 36\n              }\n            }, getFieldDecorator(field, {\n              initialValue: initialValue\n            })( /*#__PURE__*/React.createElement(_Select, {\n              placeholder: placeholder,\n              style: {\n                width: width\n              },\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 27,\n                columnNumber: 33\n              }\n            }, Utils.getOptionsList(list))));\n            formItemList.push(SELECT);\n          } else if (type == 'INPUT') {\n            const INPUT = /*#__PURE__*/React.createElement(FormItem, {\n              label: label,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 35,\n                columnNumber: 35\n              }\n            }, getFieldDecorator(field, {\n              initialValue: initialValue\n            })( /*#__PURE__*/React.createElement(_Input, {\n              type: \"text\",\n              placeholder: placeholder,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 40,\n                columnNumber: 33\n              }\n            })));\n            formItemList.push(INPUT);\n          } else if (type == '时间查询') {\n            const startTime = /*#__PURE__*/React.createElement(FormItem, {\n              label: \"\\u8BA2\\u5355\\u65F6\\u95F4\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 46,\n                columnNumber: 39\n              }\n            }, getFieldDecorator('startTime', {\n              initialValue: initialValue\n            })( /*#__PURE__*/React.createElement(_DatePicker, {\n              placeholder: \"\\u9009\\u62E9\\u5F00\\u59CB\\u65F6\\u95F4\",\n              showTime: true,\n              format: \"YYYY-MM-DD HH:mm:ss\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 51,\n                columnNumber: 33\n              }\n            })));\n            const endTime = /*#__PURE__*/React.createElement(FormItem, {\n              label: \"~\",\n              colon: false,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 55,\n                columnNumber: 37\n              }\n            }, getFieldDecorator('endTime', {\n              initialValue: initialValue\n            })( /*#__PURE__*/React.createElement(_DatePicker, {\n              placeholder: \"\\u9009\\u62E9\\u7ED3\\u675F\\u65F6\\u95F4\",\n              showTime: true,\n              format: \"YYYY-MM-DD HH:mm:ss\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 60,\n                columnNumber: 33\n              }\n            })));\n            formItemList.push(startTime);\n            formItemList.push(endTime);\n          } else if (type == 'CHECKBOX') {\n            const CHECKBOX = /*#__PURE__*/React.createElement(FormItem, {\n              label: label,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 67,\n                columnNumber: 38\n              }\n            }, getFieldDecorator(field, {\n              initialValue: initialValue,\n              valuePropName: 'checked'\n            })( /*#__PURE__*/React.createElement(_Checkbox, {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 73,\n                columnNumber: 33\n              }\n            }, label)));\n            formItemList.push(CHECKBOX);\n          } else if (type == \"DATEPICKER\") {\n            const DATE = /*#__PURE__*/React.createElement(FormItem, {\n              label: label,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 81,\n                columnNumber: 34\n              }\n            }, getFieldDecorator(field, {\n              initialValue: initialValue\n            })( /*#__PURE__*/React.createElement(_DatePicker, {\n              placeholder: placeholder,\n              showTime: true,\n              format: \"YYYY-MM-DD HH:mm:ss\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 86,\n                columnNumber: 33\n              }\n            })));\n            formItemList.push(DATE);\n          }\n        });\n      }\n\n      return formItemList;\n    };\n\n    this.handleFilterSubmit = () => {\n      let fieldsValue = this.props.form.getFieldsValue();\n      this.props.filterSubmit(fieldsValue);\n    };\n\n    this.reset = () => {\n      this.props.form.resetFields();\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(_Form, {\n      layout: \"inline\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 13\n      }\n    }, this.initFormList(), /*#__PURE__*/React.createElement(FormItem, {\n      label: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(_Button, {\n      type: \"primary\",\n      style: {\n        margin: \"0 20px\",\n        width: 100\n      },\n      onClick: this.handleFilterSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 21\n      }\n    }, \"\\u67E5\\u8BE2\"), /*#__PURE__*/React.createElement(_Button, {\n      style: {\n        width: 100\n      },\n      onClick: this.reset,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 21\n      }\n    }, \"\\u91CD\\u7F6E\")));\n  }\n\n}\n\nexport default _Form.create({})(FilterForm);","map":{"version":3,"sources":["/Users/xumeihong/Documents/code/git/react/demos/demo2/src/components/BaseForm/index.js"],"names":["React","Utils","FormItem","Item","Option","FilterForm","Component","initFormList","getFieldDecorator","props","form","formList","formItemList","length","forEach","item","index","type","label","field","placeholder","initialValue","width","list","SELECT","getOptionsList","push","INPUT","startTime","endTime","CHECKBOX","valuePropName","DATE","handleFilterSubmit","fieldsValue","getFieldsValue","filterSubmit","reset","resetFields","render","margin","create"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,KAAP,MAAkB,mBAAlB;AACA,MAAMC,QAAQ,GAAG,MAAKC,IAAtB;AACA,MAAMC,MAAM,GAAG,QAAOA,MAAtB;;AAEA,MAAMC,UAAN,SAAyBL,KAAK,CAACM,SAA/B,CAAyC;AAAA;AAAA;;AAAA,SACrCC,YADqC,GACtB,MAAM;AACjB,YAAM;AAAEC,QAAAA;AAAF,UAAwB,KAAKC,KAAL,CAAWC,IAAzC;AACA,YAAMC,QAAQ,GAAG,KAAKF,KAAL,CAAWE,QAA5B;AACA,YAAMC,YAAY,GAAG,EAArB;;AACA,UAAID,QAAQ,IAAIA,QAAQ,CAACE,MAAT,GAAkB,CAAlC,EAAqC;AACjCF,QAAAA,QAAQ,CAACG,OAAT,CAAiB,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAC9B,cAAIC,IAAI,GAAGF,IAAI,CAACE,IAAhB;AACA,cAAIC,KAAK,GAAGH,IAAI,CAACG,KAAjB;AACA,cAAIC,KAAK,GAAGJ,IAAI,CAACI,KAAjB;AACA,cAAIC,WAAW,GAAGL,IAAI,CAACK,WAAvB;AACA,cAAIC,YAAY,GAAGN,IAAI,CAACM,YAAL,IAAqB,EAAxC;AACA,cAAIC,KAAK,GAAGP,IAAI,CAACO,KAAjB;AACA,cAAIC,IAAI,GAAGR,IAAI,CAACQ,IAAhB;;AACA,cAAIN,IAAI,IAAI,QAAZ,EAAsB;AAClB,kBAAMO,MAAM,gBAAG,oBAAC,QAAD;AAAU,cAAA,KAAK,EAAEN,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAEPV,iBAAiB,CAACW,KAAD,EAAQ;AACrBE,cAAAA,YAAY,EAAEA;AADO,aAAR,CAAjB,eAGI;AAAQ,cAAA,WAAW,EAAED,WAArB;AAAkC,cAAA,KAAK,EAAE;AAAEE,gBAAAA,KAAK,EAAEA;AAAT,eAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eACKrB,KAAK,CAACwB,cAAN,CAAqBF,IAArB,CADL,CAHJ,CAFO,CAAf;AAWAX,YAAAA,YAAY,CAACc,IAAb,CAAkBF,MAAlB;AACH,WAbD,MAaO,IAAIP,IAAI,IAAI,OAAZ,EAAqB;AACxB,kBAAMU,KAAK,gBAAG,oBAAC,QAAD;AAAU,cAAA,KAAK,EAAET,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAENV,iBAAiB,CAACW,KAAD,EAAQ;AACrBE,cAAAA,YAAY,EAAEA;AADO,aAAR,CAAjB,eAGI;AAAO,cAAA,IAAI,EAAC,MAAZ;AAAmB,cAAA,WAAW,EAAED,WAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ,CAFM,CAAd;AASAR,YAAAA,YAAY,CAACc,IAAb,CAAkBC,KAAlB;AACH,WAXM,MAWA,IAAIV,IAAI,IAAI,MAAZ,EAAoB;AACvB,kBAAMW,SAAS,gBAAG,oBAAC,QAAD;AAAU,cAAA,KAAK,EAAC,0BAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAEVpB,iBAAiB,CAAC,WAAD,EAAc;AAC3Ba,cAAAA,YAAY,EAAEA;AADa,aAAd,CAAjB,eAGI;AAAY,cAAA,WAAW,EAAC,sCAAxB;AAAiC,cAAA,QAAQ,MAAzC;AAA0C,cAAA,MAAM,EAAC,qBAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ,CAFU,CAAlB;AASA,kBAAMQ,OAAO,gBAAG,oBAAC,QAAD;AAAU,cAAA,KAAK,EAAC,GAAhB;AAAoB,cAAA,KAAK,EAAE,KAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAERrB,iBAAiB,CAAC,SAAD,EAAY;AACzBa,cAAAA,YAAY,EAAEA;AADW,aAAZ,CAAjB,eAGI;AAAY,cAAA,WAAW,EAAC,sCAAxB;AAAiC,cAAA,QAAQ,MAAzC;AAA0C,cAAA,MAAM,EAAC,qBAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ,CAFQ,CAAhB;AASAT,YAAAA,YAAY,CAACc,IAAb,CAAkBE,SAAlB;AACAhB,YAAAA,YAAY,CAACc,IAAb,CAAkBG,OAAlB;AACH,WArBM,MAqBA,IAAIZ,IAAI,IAAI,UAAZ,EAAwB;AAC3B,kBAAMa,QAAQ,gBAAG,oBAAC,QAAD;AAAU,cAAA,KAAK,EAAEZ,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAETV,iBAAiB,CAACW,KAAD,EAAQ;AACrBE,cAAAA,YAAY,EAAEA,YADO;AAErBU,cAAAA,aAAa,EAAE;AAFM,aAAR,CAAjB,eAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eACKb,KADL,CAJJ,CAFS,CAAjB;AAYAN,YAAAA,YAAY,CAACc,IAAb,CAAkBI,QAAlB;AACH,WAdM,MAcD,IAAIb,IAAI,IAAI,YAAZ,EAA0B;AAC5B,kBAAMe,IAAI,gBAAG,oBAAC,QAAD;AAAU,cAAA,KAAK,EAAEd,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAELV,iBAAiB,CAACW,KAAD,EAAQ;AACrBE,cAAAA,YAAY,EAAEA;AADO,aAAR,CAAjB,eAGI;AAAY,cAAA,WAAW,EAAED,WAAzB;AAAsC,cAAA,QAAQ,MAA9C;AAA+C,cAAA,MAAM,EAAC,qBAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ,CAFK,CAAb;AASAR,YAAAA,YAAY,CAACc,IAAb,CAAkBM,IAAlB;AACH;AACJ,SA/ED;AAgFH;;AACD,aAAOpB,YAAP;AACH,KAxFoC;;AAAA,SA0FrCqB,kBA1FqC,GA0FhB,MAAI;AACrB,UAAIC,WAAW,GAAG,KAAKzB,KAAL,CAAWC,IAAX,CAAgByB,cAAhB,EAAlB;AACA,WAAK1B,KAAL,CAAW2B,YAAX,CAAwBF,WAAxB;AACH,KA7FoC;;AAAA,SA+FrCG,KA/FqC,GA+F7B,MAAI;AACR,WAAK5B,KAAL,CAAWC,IAAX,CAAgB4B,WAAhB;AACH,KAjGoC;AAAA;;AAkGrCC,EAAAA,MAAM,GAAG;AACL,wBACI;AAAM,MAAA,MAAM,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKhC,YAAL,EADL,eAEI,oBAAC,QAAD;AAAU,MAAA,KAAK,EAAC,EAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAQ,MAAA,IAAI,EAAC,SAAb;AAAuB,MAAA,KAAK,EAAE;AAAEiC,QAAAA,MAAM,EAAE,QAAV;AAAoBlB,QAAAA,KAAK,EAAE;AAA3B,OAA9B;AAAgE,MAAA,OAAO,EAAE,KAAKW,kBAA9E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,eAEI;AAAQ,MAAA,KAAK,EAAE;AAAEX,QAAAA,KAAK,EAAE;AAAT,OAAf;AAA+B,MAAA,OAAO,EAAE,KAAKe,KAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAFJ,CAFJ,CADJ;AAUH;;AA7GoC;;AA+GzC,eAAe,MAAKI,MAAL,CAAY,EAAZ,EAAgBpC,UAAhB,CAAf","sourcesContent":["import React from 'react';\nimport { Input, Select, Form, Button, Checkbox, Radio, DatePicker } from 'antd'\nimport Utils from '../../utils/utils';\nconst FormItem = Form.Item;\nconst Option = Select.Option;\n\nclass FilterForm extends React.Component {\n    initFormList = () => {\n        const { getFieldDecorator } = this.props.form;\n        const formList = this.props.formList;\n        const formItemList = [];\n        if (formList && formList.length > 0) {\n            formList.forEach((item, index) => {\n                let type = item.type;\n                let label = item.label;\n                let field = item.field;\n                let placeholder = item.placeholder;\n                let initialValue = item.initialValue || '';\n                let width = item.width;\n                let list = item.list;\n                if (type == 'SELECT') {\n                    const SELECT = <FormItem label={label}>\n                        {\n                            getFieldDecorator(field, {\n                                initialValue: initialValue\n                            })(\n                                <Select placeholder={placeholder} style={{ width: width }}>\n                                    {Utils.getOptionsList(list)}\n                                </Select>\n                            )\n                        }\n                    </FormItem>;\n                    formItemList.push(SELECT);\n                } else if (type == 'INPUT') {\n                    const INPUT = <FormItem label={label}>\n                        {\n                            getFieldDecorator(field, {\n                                initialValue: initialValue\n                            })(\n                                <Input type='text' placeholder={placeholder} />\n                            )\n                        }\n                    </FormItem>;\n                    formItemList.push(INPUT);\n                } else if (type == '时间查询') {\n                    const startTime = <FormItem label='订单时间'>\n                        {\n                            getFieldDecorator('startTime', {\n                                initialValue: initialValue\n                            })(\n                                <DatePicker placeholder=\"选择开始时间\" showTime format=\"YYYY-MM-DD HH:mm:ss\" />\n                            )\n                        }\n                    </FormItem>;\n                    const endTime = <FormItem label=\"~\" colon={false}>\n                        {\n                            getFieldDecorator('endTime', {\n                                initialValue: initialValue\n                            })(\n                                <DatePicker placeholder=\"选择结束时间\" showTime format=\"YYYY-MM-DD HH:mm:ss\" />\n                            )\n                        }\n                    </FormItem>;\n                    formItemList.push(startTime);\n                    formItemList.push(endTime);\n                } else if (type == 'CHECKBOX') {\n                    const CHECKBOX = <FormItem label={label}>\n                        {\n                            getFieldDecorator(field, {\n                                initialValue: initialValue,\n                                valuePropName: 'checked'\n                            })(\n                                <Checkbox>\n                                    {label}\n                                </Checkbox>\n                            )\n                        }\n                    </FormItem>;\n                    formItemList.push(CHECKBOX);\n                }else if (type == \"DATEPICKER\") {\n                    const DATE = <FormItem label={label}>\n                        {\n                            getFieldDecorator(field, {\n                                initialValue: initialValue\n                            })(\n                                <DatePicker placeholder={placeholder} showTime format=\"YYYY-MM-DD HH:mm:ss\" />\n                            )\n                        }\n                    </FormItem>;\n                    formItemList.push(DATE);\n                }\n            });\n        }\n        return formItemList;\n    }\n\n    handleFilterSubmit = ()=>{\n        let fieldsValue = this.props.form.getFieldsValue();\n        this.props.filterSubmit(fieldsValue);\n    }\n\n    reset = ()=>{\n        this.props.form.resetFields();\n    }\n    render() {\n        return (\n            <Form layout=\"inline\">\n                {this.initFormList()}\n                <FormItem label=\"\">\n                    <Button type=\"primary\" style={{ margin: \"0 20px\", width: 100 }} onClick={this.handleFilterSubmit}>查询</Button>\n                    <Button style={{ width: 100 }} onClick={this.reset} >重置</Button>\n                </FormItem>\n            </Form>\n        );\n\n    }\n}\nexport default Form.create({})(FilterForm);"]},"metadata":{},"sourceType":"module"}