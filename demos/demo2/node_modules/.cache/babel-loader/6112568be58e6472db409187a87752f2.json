{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getFullKeyList = getFullKeyList;\nexports.calcRangeKeys = calcRangeKeys;\nexports.convertDirectoryKeysToNodes = convertDirectoryKeysToNodes;\nexports.getFullKeyListByTreeData = getFullKeyListByTreeData;\n\nvar _util = require(\"rc-tree/lib/util\");\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nvar Record;\n\n(function (Record) {\n  Record[Record[\"None\"] = 0] = \"None\";\n  Record[Record[\"Start\"] = 1] = \"Start\";\n  Record[Record[\"End\"] = 2] = \"End\";\n})(Record || (Record = {})); // TODO: Move this logic into `rc-tree`\n\n\nfunction traverseNodesKey(rootChildren, callback) {\n  var nodeList = (0, _util.getNodeChildren)(rootChildren) || [];\n\n  function processNode(node) {\n    var key = node.key,\n        children = node.props.children;\n\n    if (callback(key, node) !== false) {\n      traverseNodesKey(children, callback);\n    }\n  }\n\n  nodeList.forEach(processNode);\n}\n\nfunction getFullKeyList(children) {\n  var _convertTreeToEntitie = (0, _util.convertTreeToEntities)(children),\n      keyEntities = _convertTreeToEntitie.keyEntities;\n\n  return Object.keys(keyEntities);\n}\n/** 计算选中范围，只考虑expanded情况以优化性能 */\n\n\nfunction calcRangeKeys(rootChildren, expandedKeys, startKey, endKey) {\n  var keys = [];\n  var record = Record.None;\n\n  if (startKey && startKey === endKey) {\n    return [startKey];\n  }\n\n  if (!startKey || !endKey) {\n    return [];\n  }\n\n  function matchKey(key) {\n    return key === startKey || key === endKey;\n  }\n\n  traverseNodesKey(rootChildren, function (key) {\n    if (record === Record.End) {\n      return false;\n    }\n\n    if (matchKey(key)) {\n      // Match test\n      keys.push(key);\n\n      if (record === Record.None) {\n        record = Record.Start;\n      } else if (record === Record.Start) {\n        record = Record.End;\n        return false;\n      }\n    } else if (record === Record.Start) {\n      // Append selection\n      keys.push(key);\n    }\n\n    if (expandedKeys.indexOf(key) === -1) {\n      return false;\n    }\n\n    return true;\n  });\n  return keys;\n}\n\nfunction convertDirectoryKeysToNodes(rootChildren, keys) {\n  var restKeys = _toConsumableArray(keys);\n\n  var nodes = [];\n  traverseNodesKey(rootChildren, function (key, node) {\n    var index = restKeys.indexOf(key);\n\n    if (index !== -1) {\n      nodes.push(node);\n      restKeys.splice(index, 1);\n    }\n\n    return !!restKeys.length;\n  });\n  return nodes;\n}\n\nfunction getFullKeyListByTreeData(treeData) {\n  var keys = [];\n  (treeData || []).forEach(function (item) {\n    keys.push(item.key);\n\n    if (item.children) {\n      keys = [].concat(_toConsumableArray(keys), _toConsumableArray(getFullKeyListByTreeData(item.children)));\n    }\n  });\n  return keys;\n}","map":{"version":3,"sources":["/Users/xumeihong/Documents/code/git/react/demos/demo2/node_modules/antd/lib/tree/util.js"],"names":["Object","defineProperty","exports","value","getFullKeyList","calcRangeKeys","convertDirectoryKeysToNodes","getFullKeyListByTreeData","_util","require","_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","TypeError","o","minLen","_arrayLikeToArray","n","prototype","toString","call","slice","constructor","name","Array","from","test","iter","Symbol","iterator","isArray","len","length","i","arr2","Record","traverseNodesKey","rootChildren","callback","nodeList","getNodeChildren","processNode","node","key","children","props","forEach","_convertTreeToEntitie","convertTreeToEntities","keyEntities","keys","expandedKeys","startKey","endKey","record","None","matchKey","End","push","Start","indexOf","restKeys","nodes","index","splice","treeData","item","concat"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getFullKeyList = getFullKeyList;\nexports.calcRangeKeys = calcRangeKeys;\nexports.convertDirectoryKeysToNodes = convertDirectoryKeysToNodes;\nexports.getFullKeyListByTreeData = getFullKeyListByTreeData;\n\nvar _util = require(\"rc-tree/lib/util\");\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar Record;\n\n(function (Record) {\n  Record[Record[\"None\"] = 0] = \"None\";\n  Record[Record[\"Start\"] = 1] = \"Start\";\n  Record[Record[\"End\"] = 2] = \"End\";\n})(Record || (Record = {})); // TODO: Move this logic into `rc-tree`\n\n\nfunction traverseNodesKey(rootChildren, callback) {\n  var nodeList = (0, _util.getNodeChildren)(rootChildren) || [];\n\n  function processNode(node) {\n    var key = node.key,\n        children = node.props.children;\n\n    if (callback(key, node) !== false) {\n      traverseNodesKey(children, callback);\n    }\n  }\n\n  nodeList.forEach(processNode);\n}\n\nfunction getFullKeyList(children) {\n  var _convertTreeToEntitie = (0, _util.convertTreeToEntities)(children),\n      keyEntities = _convertTreeToEntitie.keyEntities;\n\n  return Object.keys(keyEntities);\n}\n/** 计算选中范围，只考虑expanded情况以优化性能 */\n\n\nfunction calcRangeKeys(rootChildren, expandedKeys, startKey, endKey) {\n  var keys = [];\n  var record = Record.None;\n\n  if (startKey && startKey === endKey) {\n    return [startKey];\n  }\n\n  if (!startKey || !endKey) {\n    return [];\n  }\n\n  function matchKey(key) {\n    return key === startKey || key === endKey;\n  }\n\n  traverseNodesKey(rootChildren, function (key) {\n    if (record === Record.End) {\n      return false;\n    }\n\n    if (matchKey(key)) {\n      // Match test\n      keys.push(key);\n\n      if (record === Record.None) {\n        record = Record.Start;\n      } else if (record === Record.Start) {\n        record = Record.End;\n        return false;\n      }\n    } else if (record === Record.Start) {\n      // Append selection\n      keys.push(key);\n    }\n\n    if (expandedKeys.indexOf(key) === -1) {\n      return false;\n    }\n\n    return true;\n  });\n  return keys;\n}\n\nfunction convertDirectoryKeysToNodes(rootChildren, keys) {\n  var restKeys = _toConsumableArray(keys);\n\n  var nodes = [];\n  traverseNodesKey(rootChildren, function (key, node) {\n    var index = restKeys.indexOf(key);\n\n    if (index !== -1) {\n      nodes.push(node);\n      restKeys.splice(index, 1);\n    }\n\n    return !!restKeys.length;\n  });\n  return nodes;\n}\n\nfunction getFullKeyListByTreeData(treeData) {\n  var keys = [];\n  (treeData || []).forEach(function (item) {\n    keys.push(item.key);\n\n    if (item.children) {\n      keys = [].concat(_toConsumableArray(keys), _toConsumableArray(getFullKeyListByTreeData(item.children)));\n    }\n  });\n  return keys;\n}"]},"metadata":{},"sourceType":"script"}