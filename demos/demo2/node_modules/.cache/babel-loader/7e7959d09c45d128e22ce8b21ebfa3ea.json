{"ast":null,"code":"import \"antd/lib/modal/style\";\nimport _Modal from \"antd/lib/modal\";\nimport JsonP from 'jsonp';\nimport axios from 'axios';\nimport Utils from '../utils/utils';\n\nclass Axios {\n  static jsonp(options) {\n    return new Promise((resolve, reject) => {\n      JsonP(options.url, {\n        param: 'callback'\n      }, (err, response) => {\n        if (response.status === 'success') {\n          return resolve(response);\n        } else {\n          return reject(response.message);\n        }\n      });\n    });\n  } // static ajax(options){\n  //     let baseURL = `http://yapi.demo.qunar.com/mock/80318`;\n  //     return new Promise((resolve, reject) => {\n  //     axios({\n  //             baseURL: baseURL,\n  //             method: 'get',\n  //             url: options.url,\n  //             timeout: 5000,\n  //             params: (options.data && options.data.params) ? options.data.params : ''\n  //         }).then(response => {\n  //             if (response.status == '200'){\n  //                 if (response.data.code == 0) {\n  //                     resolve(response.data);\n  //                 }else {\n  //                     Modal.info({\n  //                         title: '提示',\n  //                         content: response.data.msg\n  //                     })\n  //                 }\n  //             }else {\n  //                 reject(response.data);\n  //             }\n  //         })\n  //     });\n  // }\n\n\n  static requestList(_this, url, params) {\n    var data = {\n      params\n    };\n    this.ajax({\n      url,\n      data\n    }).then(res => {\n      let list = res.result.itermList.map((item, index) => {\n        item.key = index;\n        return item;\n      });\n\n      _this.setState({\n        list,\n        pagination: Utils.pagination(res, current => {\n          _this.params.page = current;\n\n          _this.requestList();\n        })\n      });\n    }).catch(error => {\n      throw new Error(error);\n    });\n  }\n\n  static ajax(options) {\n    let baseURL = \"https://www.fastmock.site/mock/adf2114f61bec557d244bd064dd0b5d3/fastmock\";\n    return new Promise((resolve, reject) => {\n      axios({\n        baseURL: baseURL,\n        method: 'get',\n        url: options.url,\n        timeout: 5000,\n        params: options.data && options.data.params ? options.data.params : ''\n      }).then(response => {\n        if (response.status == '200') {\n          if (response.data.code == 0) {\n            resolve(response.data);\n          } else {\n            _Modal.info({\n              title: '提示',\n              content: response.data.msg\n            });\n          }\n        } else {\n          reject(response.data);\n        }\n      });\n    });\n  }\n\n}\n\nexport default Axios;","map":{"version":3,"sources":["/Users/xumeihong/Documents/code/git/react/demos/demo2/src/axios/index.js"],"names":["JsonP","axios","Utils","Axios","jsonp","options","Promise","resolve","reject","url","param","err","response","status","message","requestList","_this","params","data","ajax","then","res","list","result","itermList","map","item","index","key","setState","pagination","current","page","catch","error","Error","baseURL","method","timeout","code","info","title","content","msg"],"mappings":"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","sourcesContent":["import JsonP from 'jsonp';\nimport axios from 'axios'\nimport { Modal } from 'antd';\nimport Utils from '../utils/utils';\n\nclass Axios {\n    static jsonp(options) {\n        return new Promise((resolve, reject) => {\n            JsonP(options.url, {\n                param: 'callback'\n            }, (err, response) => {\n                if (response.status === 'success') {\n                    return resolve(response);\n                } else {\n                    return reject(response.message);\n                }\n            })\n        });\n    }\n    // static ajax(options){\n    //     let baseURL = `http://yapi.demo.qunar.com/mock/80318`;\n    //     return new Promise((resolve, reject) => {\n    //     axios({\n    //             baseURL: baseURL,\n    //             method: 'get',\n    //             url: options.url,\n    //             timeout: 5000,\n    //             params: (options.data && options.data.params) ? options.data.params : ''\n    //         }).then(response => {\n    //             if (response.status == '200'){\n    //                 if (response.data.code == 0) {\n    //                     resolve(response.data);\n    //                 }else {\n    //                     Modal.info({\n    //                         title: '提示',\n    //                         content: response.data.msg\n    //                     })\n    //                 }\n    //             }else {\n    //                 reject(response.data);\n    //             }\n    //         })\n    //     });\n    // }\n\n\n    static requestList(_this, url, params) {\n        var data = { params };\n        this.ajax({\n            url,\n            data\n        }).then(res => {\n            let list = res.result.itermList.map((item, index) => {\n                item.key = index;\n                return item;\n            });\n            _this.setState({\n                list,\n                pagination: Utils.pagination(res, current => {\n                    _this.params.page = current;\n                    _this.requestList();\n                })\n            })\n        }).catch(error => {\n            throw new Error(error);\n        });\n    }\n    static ajax(options) {\n        let baseURL = \"https://www.fastmock.site/mock/adf2114f61bec557d244bd064dd0b5d3/fastmock\";\n        return new Promise((resolve, reject) => {\n            axios({\n                baseURL: baseURL,\n                method: 'get',\n                url: options.url,\n                timeout: 5000,\n                params: (options.data && options.data.params) ? options.data.params : ''\n            }).then(response => {\n                if (response.status == '200') {\n                    if (response.data.code == 0) {\n                        resolve(response.data);\n                    } else {\n                        Modal.info({\n                            title: '提示',\n                            content: response.data.msg\n                        })\n                    }\n                } else {\n                    reject(response.data);\n                }\n            })\n        });\n    }\n}\n\nexport default Axios;"]},"metadata":{},"sourceType":"module"}